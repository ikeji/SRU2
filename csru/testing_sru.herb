// Programing Language SRU
// Copyright(C) 2005-2010 IKeJI
// 
#line 5 "testing_sru.herb"

#ifndef TESTING_SRU_H_
#define TESTING_SRU_H_

#include <cassert>
#include <string>
#include "proc.h"
#include "interpreter.h"
#include "object_vector.h"
#include "stack_frame.h"
#include "logging.h"

namespace sru_test {

inline sru::BasicObjectPtr Call(const sru::BasicObjectPtr& obj,
                                const std::string& method,
                                const sru::ptr_vector& v){
  assert(obj.get());
  const sru::BasicObjectPtr& m = obj->Get(method);
  if(!m.get()){
    LOG << "Target: " << obj->Inspect();
    assert(m.get());
  }
  sru::Proc* proc = m->GetData<sru::Proc>();
  if(!proc){
    LOG << "Target: " << obj->Inspect();
    assert(proc);
  }
  proc->Call(m, v);
  sru::StackFrame* st = sru::Interpreter::Instance()->CurrentStackFrame();
  assert(st);
  return st->ReturnValue();
}

<% 20.times do |n| %>
#line 41 "testing_sru.herb"
inline sru::BasicObjectPtr Call(const sru::BasicObjectPtr& obj,
                                const std::string& method<% n.times do |i| %>,
                                const sru::BasicObjectPtr& arg<%= i %><% end %>){
  sru::ptr_vector args;
  args.push_back(obj);
<% n.times do |i| %>  args.push_back(arg<%= i %>);
<% end %>
  return Call(obj, method, args);
}
<% end %>

#line 53 "testing_sru.herb"
inline sru::ptr_vector A(){
  return sru::ptr_vector();
}

<% 60.times do |n| %>
#line 59 "testing_sru.herb"
inline sru::ptr_vector A(const sru::BasicObjectPtr& obj<% n.times do |i| %>,
    const sru::BasicObjectPtr& obj<%= i %><% end %>){
  sru::ptr_vector ret;
  ret.push_back(obj);
<% n.times do |i| %>  ret.push_back(obj<%= i %>);
<% end %>
  return ret;
}
<% end %>

}  // namespace sru_test

#endif  // TESTING_SRU_H_
