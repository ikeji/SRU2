// Programing Language SRU
// Copyright(C) 2005-2008 IKeJI
// 
#line 5 "testing_ast.herb"

#include <string>
#include <vector>
#include "ast.h"
#include "object_vector.h"

namespace sru {
class BasicObjectPtr;
}

namespace sru_test {

inline std::string InspectAST(const sru::BasicObjectPtr& obj){
  return dynamic_cast<sru::Expression*>(obj->Data())->InspectAST();
}

inline sru::BasicObjectPtr L(const sru::BasicObjectPtr& env,
                             const std::string& name,
                             const sru::BasicObjectPtr& rv){
  return sru::LetExpression::New(env,name,rv);
}

inline sru::BasicObjectPtr L(const std::string& name,const sru::BasicObjectPtr& rv){
  return sru::LetExpression::New(NULL,name,rv);
}

inline sru::BasicObjectPtr R(const sru::BasicObjectPtr& env,const std::string& name){
  return sru::RefExpression::New(env,name);
}

inline sru::BasicObjectPtr R(const std::string& name){
  return sru::RefExpression::New(NULL,name);
}

<% 20.times do |n| %>
#line 40 "testing_ast.herb"
inline sru::BasicObjectPtr C(const sru::BasicObjectPtr& proc<% n.times do |i| %>,
                      const sru::BasicObjectPtr& arg<%= i %><% end %>){
  sru::ptr_vector arg;
<% n.times do |i| %>  arg.push_back(arg<%= i %>);
<% end %>
  return sru::CallExpression::New(proc,arg);
}
<% end %>

<% 20.times do |e| %><% 20.times do |s| %>
#line 52 "testing_ast.herb"
inline sru::BasicObjectPtr P(<% s.times do |i| %><% if i != 0 %>,
                      <% end %>const std::string& varg<%= i %><% end %><% e.times do |j| %><% if s!=0 || j !=0 %>,
                      <% end %>const sru::BasicObjectPtr& expression<%= j %><% end %>){
  std::vector<std::string> varg;
<% s.times do |i| %>  varg.push_back(varg<%= i %>);
<% end %>
  sru::ptr_vector expressions;
<% e.times do |j| %>  expressions.push_back(expression<%= j %>);
<% end %>
  return sru::ProcExpression::New(varg,"",expressions);
}
<% end %><% end %>

<% 20.times do |e| %><% 20.times do |s| %>
#line 67 "testing_ast.herb"
inline sru::BasicObjectPtr PR(<% s.times do |i| if i != 0 %>,
                      <% end %>const std::string& varg<%= i %><% end; if s !=0 %>,
                      <% end %>const std::string& retval<% e.times do |j| %>,
                      const sru::BasicObjectPtr& expression<%= j %><% end %>){
  std::vector<std::string> varg;
<% s.times do |i| %>  varg.push_back(varg<%= i %>);
<% end %>
  sru::ptr_vector expressions;
<% e.times do |j| %>  expressions.push_back(expression<%= j %>);
<% end %>
  return sru::ProcExpression::New(varg,retval,expressions);
}
<% end %><% end %>


inline sru::BasicObjectPtr S(const std::string& str){
  return sru::StringExpression::New(str);
}

}  // namespace sru_test
